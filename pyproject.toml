[build-system]
requires = ["poetry-core>=2.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "ansys-rep-housekeeper"
description = "REP housekeeper"
readme = "README_whl.md"
requires-python = "^3.10"
authors = [
     {name = "ANSYS, Inc.", email = "pyansys.core@ansys.com"}
]
maintainers = []
dynamic = ["version"]

dependencies = [
    "backoff>=2.2.1",
    "fastapi>=0.115.6",
    "googleapis_common_protos>=1.66.0",
    "hiredis>=2.3.2",
    "httpx>=0.27.0",
    "redis>=5.0.4",
    "transitions>=0.9.2",
    "uvicorn>=0.34.0",
    "protobuf (>=5.29.3)",
]

[project.optional-dependencies]
internal = [
    "ansys-dcs-monitor-source @ git+https://github.com/ansys-internal/dcs-monitor-source-py.git@main",
    "ansys-rep-common[redis,otel] @ git+https://github.com/ansys-internal/rep-common-py.git@main",
    "ansys-hps-data-transfer-client @ git+https://github.com/ansys-internal/hps-data-transfer-client.git@main",
    "ansys-rep-schemas @ git+https://github.com/ansys-internal/rep-schemas.git@main",
]

[project.entry-points."housekeeper"]
# Scaling strategies
scaling_standalone = "ansys.rep.housekeeper.scaling.standalone"
scaling_redis = "ansys.rep.housekeeper.scaling.redis"
# JMS related tasks
jms_reset_tasks = "ansys.rep.housekeeper.tasks.jms.reset_tasks"
jms_purge_expired_files = "ansys.rep.housekeeper.tasks.jms.purge_expired_files"
jms_gather_project_stats = "ansys.rep.housekeeper.tasks.jms.gather_project_stats"
jms_delete_project= "ansys.rep.housekeeper.tasks.jms.delete_projects"
jms_deactivate_projects= "ansys.rep.housekeeper.tasks.jms.deactivate_projects"
# RMS related tasks
rms_purge_inactive_workers = "ansys.rep.housekeeper.tasks.rms.purge_inactive_workers"


[tool.poetry]
packages = [
    { include = "ansys", from = "." },
]
include = [{path="ansys/**/build_info.py", format=["sdist", "wheel"]}]
version = "0.0.0"

[tool.poetry.requires-plugins]
"poetry-plugin-export" = ">=1.9.0"
"poetry-plugin-shell" = ">=1.0.1"
"poetry-pre-commit-plugin" = ">=0.2.1"
poetry-dynamic-versioning = { version = ">=1.0.0,<1.7.2", extras = ["plugin"] }
poethepoet = { version = ">=0.32.1", extras = ["poetry_plugin"] }
# Needs updates for v2
#poetry-plugin-freeze = ">=1.1.0"

[tool.poetry-dynamic-versioning]
enable = true
format = "{base}"

[tool.poetry-dynamic-versioning.from-file]
# Read version from the __version__.py file
# Todo: Adjust later to use gitversion
source = "ansys/rep/housekeeper/__version__.py"
pattern = "__version__ = \"(?P<base>\\d+\\.\\d+(\\.\\d+|\\.dev))\""

[tool.poetry.dependencies]

# Optional dependencies
[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pre-commit = ">=3.0.0"
bumpver = ">=2023.1129"
black = ">=24"
twine = ">=5.1.1"
pyc-wheel = ">=1.2.7"

[tool.poetry.group.tests]
optional = true

[tool.poetry.group.tests.dependencies]
pytest = ">=8.0.0"
pytest-cov = ">=5.0.0"
pytest-timeout = ">=2.3.1"
pytest-asyncio = ">=0.25.2"
pytest-mock-resources = {version = ">=2.12.0", extras = ["redis"]}
pytest-rerunfailures = "^15.0"
ansys-rep-test-setups = { git = "https://github.com/ansys-internal/rep-job-management.git", branch = "main", subdirectory = "rep_test_setups", develop = true }

[tool.poetry.scripts]
build = 'build:main'

################################################################
# Use Poe the Poet to automate generation of pyc wheels, docs etc
[tool.poe.poetry_hooks]
post_install = "write-build-info"
pre_build = "write-missing-build-info"
post_build = "build-extras"

[tool.poe.tasks]
build-extras = ["build wheels"]
write-build-info = ["build write-info"]
write-missing-build-info = ["build write-info --missing"]

[tool.poe.tasks.build]
script = "build:main"
help   = "Execute various build tasks"

################################################################
# Settings for pre-commit hooks

[tool.black]
line-length=120
preview=true

[tool.isort]
profile = "black"
force_sort_within_sections = true
default_section = "THIRDPARTY"
src_paths = ["doc", "ansys", "tests"]
line_length=120

[tool.codespell]
skip = '*.pyc,*.txt,*.gif,*.png,*.jpg,*.js,*.html,*.doctree,*.ttf,*.woff,*.woff2,*.eot,*.mp4,*.inv,*.pickle,*.ipynb,flycheck*,./.git/*,./.hypothesis/*,*.yml,./doc/build/*,./doc/images/*,./dist/*,*~,.hypothesis*,./doc/source/examples/*,*cover,*.dat,*.mac,build,./docker/mapdl/v*,./factory/*,./ansys/mapdl/core/mapdl_functions.py,PKG-INFO,*.mypy_cache/*,./docker/mapdl/*,./_unused/*'
quiet-level = 3

[tool.autoflake]
exclude = "dev_env/*,parameter_replacement.py"

[tool.coverage.run]
source = ["ansys.rep.common"]

[tool.coverage.report]
show_missing = true

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
filterwarnings = [
    "ignore::urllib3.exceptions.InsecureRequestWarning",
    "ignore::marshmallow.warnings.RemovedInMarshmallow4Warning",
]
